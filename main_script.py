#!/usr/bin/python

#Suppress Scapy IPv6 warning
import logging
logging.getLogger("scapy.runtime").setLevel(logging.ERROR)
from scapy.all import *
import multiprocessing
import threading, os, sys, argparse

# Console colors
W  = '\033[0m'  # white (normal)
R  = '\033[31m' # red
G  = '\033[32m' # green
O  = '\033[33m' # orange
B  = '\033[34m' # blue
P  = '\033[35m' # purple
C  = '\033[36m' # cyan

iface = "wlan0"
accessPoints = set()



#Parses used arguments
def parseArgs():
    # Create the arguments
    parser = argparse.ArgumentParser()

    parser.add_argument(
        "-i",
        "--interface",
        help = ("Choose an interface that supports monitor mode. Dflt: wlan0\n" +
                "Example: -i wlan1")
    )
    parser.add_argument(
        "-b",
        "--bssid",
        help = ("Enter the BSSID (MAC) of the AP you want to target.\n" +
                "Example: -b D9:A1:34:78:F6:51")#,
        #required = True
    )
    parser.add_argument(
        "-D",
        "--nodeauth",
        help = ("Skip deauthentication."),
        action = "store_true"
    )
    return parser.parse_args()

def switchToMonitorMode(iface):
    os.system("clear")

    print "[*] Switching " +iface+ " to Monitor Mode, please wait"
    os.system("airmon-ng start " +iface+ " > /dev/null 2>&1")
    print ""+G+"[*]"+W+" Done."

    return iface + "mon"
#Starts channelHopper in a new process and starts sniffing the traffic
def startAPScanner(iface):
    print "[*] Starting the AP scanner"
    p = multiprocessing.Process(target = channelHopper)
    p.start()
    sniff(iface=iface, prn=packetHandler)
    
    if KeyboardInterrupt:
        p.terminate()
    #If all else fails:
    #kill -9 `ps -ef | grep test.py | grep -v grep | awk '{print $2}'`

#Hops through 13 channels, changes channel every 100ms
def channelHopper():
    while True:
        for channel in range(1,14):
            os.system("iw dev wlan0mon set channel %d" % channel)
            time.sleep(0.1)
#Handles every captured packet while sniffing in startAPScanner
def packetHandler(pkt):
    if pkt.haslayer(Dot11Beacon):
       if pkt.info and (pkt.info not in accessPoints):
           print len(accessPoints)+1, pkt.addr3, pkt.info
           accessPoints.add(pkt.info)

def engineStart():
    args = parseArgs()
    iface = args.interface
    #ap_mac = args.bssid
    deauth = args.nodeauth #True if enabled, False otherwise

    if iface == None: 
        iface="wlan0"

    iface = switchToMonitorMode(iface)
    startAPScanner(iface)

    choice = raw_input("Choose number of an access point as target: ")
    print "You have selected the " +accessPoints[choice-1]+ " as your target"
    for ap in accessPoints:
        print ap

    #stopAPScanner()

engineStart()