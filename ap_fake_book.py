#!/usr/bin/env python

from scapy.all import *
from threading import Thread
import os, sys, time, signal, random

os.system("clear")
broadcast = "ff:ff:ff:ff:ff:ff"
myMAC = "aa:bb:cc:11:22:33"
ssid_filter = []
iface = "wlan0mon"
counter = 0


#pkts = sniff(iface="wlan0mon", count=400, filter="wlan host 7c:b0:c2:c4:de:84")


def signal_handler(signal, frame):
    print("\n---------- Quiting... ----------\n")
    os.system("kill -9 " + (str(os.getpid())) )
    sys.exit(1)

#Extract Rates and ESRates from Elt header
def GetRates(packet):
        rates = "\x82\x84\x0b\x16" #Mbps: 1, 2, 11, 22
        esRates = "\x0c\x12\x18" #Mbps: 12, 18, 24

        while Dot11Elt in packet:
                packet = packet[Dot11Elt]
                if packet.ID == 1:
                        rates = packet.info
                elif packet.ID == 50:
                        esRates = packet.info
                packet = packet.payload
        return [rates, esRates]

def SendBroadcast():
        print "Sending broadcast beacons for TestAP\n"
        packet = RadioTap() /\
                Dot11(addr1=broadcast, \
                        addr2=myMAC, \
                        addr3=myMAC, \
                        SC=random.randrange(1,3000)) /\
                Dot11Beacon(cap="ESS+short-preamble+short-slot") /\
                Dot11Elt(ID="SSID", info="TestAP") /\
                Dot11Elt(ID="DSset", info="\x07") /\
                Dot11Elt(ID="Rates", info="\x82\x84\x0b\x16") /\
                Dot11Elt(ID="ESRates", info="\x0c\x12\x18") /\
                Dot11Elt(ID="TIM", info="\x00\x01\x00\x00")
                
        sendp(packet, iface=iface, count=1000000, inter=.1)

def SendProbeResponse(packet):
        #Name of the fake AP
        ssid = "TestAP"
        rates = ["\x82\x84\x0b\x16", "\x0c\x12\x18"]
        channel = "\x07"

        print "Sending probe response for " +ssid+ \
                " to " +str(packet[Dot11].addr2)

        cap = "ESS+short-preamble+short-slot"
        resp = RadioTap() /\
                Dot11(addr1=packet[Dot11].addr1, \
                        addr2=myMAC, \
                        addr3=myMAC, \
                        SC=random.randrange(1,3000)) /\
                Dot11ProbeResp(timestamp=time.time(), cap=cap) /\
                Dot11Elt(ID="SSID", info=ssid) /\
                Dot11Elt(ID="DSset", info=channel) /\
                Dot11Elt(ID="Rates", info=rates[0]) /\
                Dot11Elt(ID="ESRates", info=rates[1]) /\
                Dot11Elt(ID="TIM", info="\x00\x01\x00\x00")
        sendp(resp, iface=iface, verbose=0)

def SendAuthResponse(packet):
        #Don't answer our own auth packets
        if packet[Dot11].addr2 != myMAC:
                print "Sending authentication to " +packet[Dot11].addr2
                #algo: 0-Open System, 1-Shared Key(WPA,WPA2)
                #seqnum: 1-request, 2-response
                #status: 0-success, 1-unspecified failures
                res = RadioTap() /\
                        Dot11(addr1=packet[Dot11].addr2, \
                        addr2=myMAC, \
                        addr3=myMAC, \
                        SC=random.randrange(1,3000)) /\
                        Dot11Auth(algo=0, seqnum=2, status=0)

                result = srp1(res, iface=iface, verbose=0, retry=20, \
                                filter="wlan host " +str(packet[Dot11].addr2))

                if result.haslayer(Dot11AssoReq):
                        print result.show()
                        SendAssocResponse(packet)
                else:
                        print "Assoc Req has not been received!"

def SendAssocResponse(packet):
        rates = ["\x82\x84\x0b\x16", "\x0c\x12\x18"]
        #AID - Association IDentifier
        print "Sending assoc response for " +ssid+ \
                " to " +str(packet[Dot11].addr2)
        res = RadioTap() /\
                Dot11(addr1=packet[Dot11].addr2, \
                        addr2=myMAC, \
                        addr3=myMAC, \
                        ) /\
                Dot11AssoResp(status=0, AID=2) /\
                Dot11Elt(ID="Rates", info=rates[0]) /\
                Dot11Elt(ID="ESRates", info=rates[1])
        sendp(res, iface=iface, verbose=0)

#This function is called for every captured packet
def PacketHandler(packet):
        #Got probe request? Send 'em some info!
        if packet.haslayer(Dot11ProbeReq):
                SendProbeResponse(packet)
        #Got authentication request? Let's proceede with assoc!
        #AuthResp waits for AssocReq so it need to be in new thread
        elif packet.haslayer(Dot11Auth):
                authThread = Thread(target=SendAuthResponse(packet))
                authThread.start()

#Start broadcasting TestAP
thread = Thread(target=SendBroadcast)
thread.start()
#Start sniffing
print "Sniffing on interface " +iface
conf.verb=0
signal.signal(signal.SIGINT, signal_handler)

sniff(iface=iface, prn=PacketHandler)
